# -*- coding: utf-8 -*-
"""fitting only  gaussian copula.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lwbmpI8GrKtXEi7zEdYJy8yeWcDDQPXw

Downloading the data for fifty companies
"""

import yfinance as yf
tickers = ['RELIANCE.NS', 'TCS.NS', 'HDFCBANK.NS', 'INFY.NS', 'HINDUNILVR.NS',
           'ICICIBANK.NS', 'KOTAKBANK.NS', 'SBIN.NS', 'BHARTIARTL.NS', 'ITC.NS',
           'HCLTECH.NS', 'ASIANPAINT.NS', 'BAJFINANCE.NS', 'AXISBANK.NS', 'LT.NS',
           'MARUTI.NS', 'ULTRACEMCO.NS', 'SUNPHARMA.NS', 'TITAN.NS', 'NESTLEIND.NS',
           'WIPRO.NS', 'ADANIGREEN.NS', 'HINDALCO.NS', 'TECHM.NS', 'M&M.NS',
           'DIVISLAB.NS', 'POWERGRID.NS', 'NTPC.NS', 'ONGC.NS', 'GRASIM.NS',
           'JSWSTEEL.NS', 'BAJAJFINSV.NS', 'TATAMOTORS.NS', 'ADANIPORTS.NS', 'BPCL.NS',
           'SHREECEM.NS', 'COALINDIA.NS', 'DABUR.NS', 'BRITANNIA.NS', 'SBILIFE.NS',
           'INDUSINDBK.NS', 'APOLLOHOSP.NS', 'EICHERMOT.NS', 'HEROMOTOCO.NS', 'TATASTEEL.NS',
           'GAIL.NS', 'IOC.NS', 'UPL.NS', 'PIDILITIND.NS', 'HDFCLIFE.NS']
data = yf.download(tickers, start='2022-01-01', end='2023-01-01')['Adj Close']
data.to_csv('nifty_fifty.csv')

pip install copulas copulae

"""Finding Two close Stocks using kendall's Tau"""

import pandas as pd
import itertools
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import kendalltau, rankdata


df = pd.read_csv('nifty_fifty.csv', index_col=0, parse_dates=True)
def calculate_kendall_tau(df):
    results = []
    for stock1, stock2 in itertools.combinations(df.columns, 2):
        tau, _ = kendalltau(df[stock1], df[stock2])
        results.append((tau, stock1, stock2))

    results.sort(reverse=True, key=lambda x: x[0])
    return results

results = calculate_kendall_tau(df)
for i in range(5):
    print(results[i])
column_name1 = results[0][1]
column_name2 = results[0][2]
print(f"Selected stocks: {column_name1} and {column_name2}")

"""Plotting log returns and histograms for both selected stocks"""

plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
plt.hist(df[column_name1], bins=100, color='blue', alpha=0.7)
plt.title(f'Histogram of {column_name1}')
plt.xlabel('Value')
plt.ylabel('Frequency')

plt.subplot(1, 2, 2)
plt.hist(df[column_name2], bins=100, color='green', alpha=0.7)
plt.title(f'Histogram of {column_name2}')
plt.xlabel('Value')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()


log_returns = np.log(df[column_name1] / df[column_name1].shift(1)).dropna()
log_returns2 = np.log(df[column_name2] / df[column_name2].shift(1)).dropna()

plt.figure(figsize=(14, 6))
plt.subplot(2, 1, 1)
plt.plot(log_returns, label=column_name1)
plt.title(f'Log Returns of {column_name1}')
plt.xlabel('Date')
plt.ylabel('Log Return')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(log_returns2, label=column_name2)
plt.title(f'Log Returns of {column_name2}')
plt.xlabel('Date')
plt.ylabel('Log Return')
plt.legend()

plt.tight_layout()
plt.show()

"""Fitting gaussian Copula and Plotting pseudo values and Conditional probabilities"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from copulae import GaussianCopula
from copulas.univariate import Univariate

# Load data
df = pd.read_csv('nifty_fifty.csv', index_col=0, parse_dates=True)

#column_name1 = 'ICICIBANK.NS'
#column_name2 = 'SBIN.NS'


univariate1 = Univariate()
univariate1.fit(df[column_name1])
parameters1 = univariate1.to_dict()
print(f'{column_name1} distribution type: {parameters1["type"]}')
print('---------------')

univariate2 = Univariate()
univariate2.fit(df[column_name2])
parameters2 = univariate2.to_dict()
print(f'{column_name2} distribution type: {parameters2["type"]}')
print('---------------')

def convert_to_pseudo_observations(series, univariate):
    cdf_vals = univariate.cdf(series)
    return cdf_vals

data_u1 = convert_to_pseudo_observations(df[column_name1], univariate1)
data_u2 = convert_to_pseudo_observations(df[column_name2], univariate2)

data = np.column_stack((data_u1, data_u2))

plt.figure(figsize=(14, 6))
plt.scatter(data_u1, data_u2, alpha=0.5)
plt.title('Pseudo-observations')
plt.xlabel(column_name1)
plt.ylabel(column_name2)
plt.grid(True)
plt.show()


gaussian_copula = GaussianCopula(dim=2)
gaussian_copula.fit(data)
params = gaussian_copula.params
log_likelihood = gaussian_copula.log_lik(data, to_pobs=False)
print(f'Gaussian Copula Parameters: {params}')
print(f'Log Likelihood: {log_likelihood}')


theta = params[0]

# Partial derivative functions for Gaussian Copula
def partial_derivative_u1(u1, u2, theta):
    exp_theta = np.exp(-theta)
    exp_theta_u1 = np.exp(-theta * u1)
    exp_theta_u2 = np.exp(-theta * u2)

    numerator = exp_theta_u1 * (exp_theta_u2 - 1)
    denominator = (exp_theta - 1) * (1 + (exp_theta_u1 - 1) * (exp_theta_u2 - 1) / (exp_theta - 1))

    return numerator / denominator

def partial_derivative_u2(u1, u2, theta):
    exp_theta = np.exp(-theta)
    exp_theta_u1 = np.exp(-theta * u1)
    exp_theta_u2 = np.exp(-theta * u2)

    numerator = exp_theta_u2 * (exp_theta_u1 - 1)
    denominator = (exp_theta - 1) * (1 + (exp_theta_u1 - 1) * (exp_theta_u2 - 1) / (exp_theta - 1))

    return numerator / denominator

def h1_u1_given_u2(u1, u2, theta):
    return partial_derivative_u2(u1, u2, theta) - 0.5

def h2_u2_given_u1(u2, u1, theta):
    return partial_derivative_u1(u1, u2, theta) - 0.5


u1_subset = convert_to_pseudo_observations(df[column_name1].iloc[132:199], univariate1)
u2_subset = convert_to_pseudo_observations(df[column_name2].iloc[132:199], univariate2)
data_array = np.column_stack((u1_subset, u2_subset))
data_array2 = np.column_stack((u2_subset, u1_subset))

u1_given_u2 = [h1_u1_given_u2(i, j, theta) for i, j in data_array]
u2_given_u1 = [h2_u2_given_u1(i, j, theta) for i, j in data_array2]

print(u1_given_u2)
print(u2_given_u1)

# Plot the results
plt.figure(figsize=(14, 6))
plt.subplot(2, 1, 1)
plt.plot(u1_given_u2, label='u1 given u2')
plt.axhline(0.5, color='red', linestyle='--')
plt.axhline(-0.5, color='blue', linestyle='--')
plt.title('u1 given u2 Conditional Distribution')
plt.xlabel('Index')
plt.ylabel('Value')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(u2_given_u1, label='u2 given u1')
plt.axhline(0.5, color='red', linestyle='--')
plt.axhline(-0.5, color='blue', linestyle='--')
plt.title('u2 given u1 Conditional Distribution')
plt.xlabel('Index')
plt.ylabel('Value')
plt.legend()

plt.tight_layout()
plt.show()

"""Plotting signals for entering and exit in market"""

threshold = 0.3
signals_u1 = ['enter' if val < -threshold else 'exit' if val > threshold else 'hold' for val in u1_given_u2]
signals_u2 = ['enter' if val < -threshold else 'exit' if val > threshold else 'hold' for val in u2_given_u1]
plt.figure(figsize=(14, 6))
plt.plot(u1_given_u2, label='u1 given u2')
plt.plot(u2_given_u1, label='u2 given u1')
plt.axhline(threshold, color='red', linestyle='--')
plt.axhline(-threshold, color='blue', linestyle='--')
plt.title('Signals based on Conditional Probabilities')
plt.xlabel('Index')
plt.ylabel('Value')
for i, signal in enumerate(signals_u1):
    if signal == 'enter':
        plt.axvline(i, color='green', linestyle='--', label='Enter Market(u1)' if i == 0 else "")
    elif signal == 'exit':
        plt.axvline(i, color='orange', linestyle='-', label='Exit Market' if i == 0 else "")

for i, signal in enumerate(signals_u2):
    if signal == 'enter':
        plt.axvline(i, color='red', linestyle='--', label='Enter Market (u2)' if i == 0 else "")
    elif signal == 'exit':
        plt.axvline(i, color='black', linestyle='--', label='Exit Market (u2)' if i == 0 else "")

plt.legend()
plt.show()