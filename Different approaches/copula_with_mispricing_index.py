# -*- coding: utf-8 -*-
"""copula with mispricing index.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q04YcchwXFuqdesdepIZxDPXO2lXl28K
"""

pip install copulas copulae

# Import necessary libraries
import pandas as pd
import scipy.stats
import itertools
import numpy as np
import matplotlib.pyplot as plt
from copulas.univariate import Univariate
from scipy.stats import rankdata
from copulae import GaussianCopula, StudentCopula, ClaytonCopula, FrankCopula, GumbelCopula

def calculate_kendall_tau(df):
    results = []
    for stock1, stock2 in itertools.combinations(df.columns, 2):
        tau, _ = scipy.stats.kendalltau(df[stock1], df[stock2])
        results.append((tau, stock1, stock2))

    results.sort(reverse=True, key=lambda x: x[0])
    return results

def convert_to_pseudo_observations(matrix):
    if isinstance(matrix, pd.DataFrame):
        matrix = matrix.values
    n_samples = matrix.shape[0]
    ranks = np.apply_along_axis(rankdata, 0, matrix)
    pseudo_observations = ranks / (n_samples + 1)
    return pseudo_observations

def calculate_aic(log_likelihood, num_params):
    return 2 * num_params - 2 * log_likelihood

# Load data
file_path = 'pair_trading.csv'
df = pd.read_csv(file_path).iloc[1:146]

# Calculate Kendall's Tau
results = calculate_kendall_tau(df)
for i in range(5):
    print(results[i])

# Select columns for pair trading
column_name1 = 'ONGC IS Equity'
column_name2 = 'KMB IS Equity'

# Plot histograms
if column_name1 in df.columns:
    print(df[column_name1])
else:
    print(f"Column '{column_name1}' does not exist in the DataFrame.")

if column_name2 in df.columns:
    print(df[column_name2])
else:
    print(f"Column '{column_name2}' does not exist in the DataFrame.")

plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
plt.hist(df[column_name1], bins=100, color='blue', alpha=0.7)
plt.title(f'Histogram of {column_name1}')
plt.xlabel('Value')
plt.ylabel('Frequency')

plt.subplot(1, 2, 2)
plt.hist(df[column_name2], bins=100, color='green', alpha=0.7)
plt.title(f'Histogram of {column_name2}')
plt.xlabel('Value')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

# Calculate log returns
log_returns = np.log(df[column_name1] / df[column_name1].shift(1)).dropna()
log_returns2 = np.log(df[column_name2] / df[column_name2].shift(1)).dropna()

# Plot log returns
plt.figure(figsize=(14, 6))
plt.subplot(2, 1, 1)
plt.plot(log_returns, label=column_name1)
plt.title(f'Log Returns of {column_name1}')
plt.xlabel('Date')
plt.ylabel('Log Return')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(log_returns2, label=column_name2)
plt.title(f'Log Returns of {column_name2}')
plt.xlabel('Date')
plt.ylabel('Log Return')
plt.legend()

plt.tight_layout()
plt.show()

# Fit univariate distributions
univariate1 = Univariate()
univariate1.fit(df[column_name1])
parameters1 = univariate1.to_dict()
print(parameters1['type'])
print('---------------')

univariate2 = Univariate()
univariate2.fit(df[column_name2])
parameters2 = univariate2.to_dict()
print(parameters2['type'])
print('---------------')

# Convert data to pseudo-observations
data = np.column_stack((df[column_name1], df[column_name2]))
data = convert_to_pseudo_observations(data)

# Fit copulas and calculate AIC
copulas = {
    'Gaussian': GaussianCopula(dim=data.shape[1]),
    'Student-t': StudentCopula(dim=data.shape[1], df=5.5),
    'Clayton': ClaytonCopula(dim=data.shape[1]),
    'Gumbel': GumbelCopula(dim=data.shape[1]),
    'Frank': FrankCopula(dim=data.shape[1])
}

aic_values = {}
for name, copula in copulas.items():
    copula.fit(data)
    log_likelihood = copula.log_lik(data, to_pobs=False)
    num_params = 2 if name == 'Student-t' else 1
    aic = calculate_aic(log_likelihood, num_params)
    aic_values[name] = aic
    print(f'Parameters for {name}:', copula.params)
    print(f'Log Likelihood for {name}:', log_likelihood)
    print(f'AIC for {name}:', aic)
    print('----------------------------------')

best_copula = min(aic_values, key=aic_values.get)
print('Copula with the lowest AIC:', best_copula)



# Calculate mispricing index
mispricing_index = log_returns - log_returns2
print('Mispricing Index:')
print(mispricing_index)

# Plot mispricing index
plt.figure(figsize=(14, 6))
plt.plot(mispricing_index, label='Mispricing Index')
plt.title('Mispricing Index Over Time')
plt.xlabel('Date')
plt.ylabel('Mispricing Index')
plt.legend()
plt.show()